// student id - 1024030295
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};
Node* head = NULL;

// insert at end (for building list)
void insertEnd(int val) {
    Node* n = new Node{val, NULL};
    if (!head) { head = n; return; }
    Node* t = head;
    while (t->next) t = t->next;
    t->next = n;
}

// delete all occurrences of key and return count
int deleteAll(int key) {
    int count = 0;

    // remove from beginning if head matches
    while (head && head->data == key) {
        Node* temp = head;
        head = head->next;
        delete temp;
        count++;
    }

    // traverse rest
    Node* curr = head;
    while (curr && curr->next) {
        if (curr->next->data == key) {
            Node* temp = curr->next;
            curr->next = curr->next->next;
            delete temp;
            count++;
        } else {
            curr = curr->next;
        }
    }
    return count;
}

// display linked list
void display() {
    Node* t = head;
    while (t) {
        cout << t->data;
        if (t->next) cout << "->";
        t = t->next;
    }
    cout << "\n";
}

int main() {
    // build linked list 1->2->1->2->1->3->1
    int arr[] = {1,2,1,2,1,3,1};
    for (int x : arr) insertEnd(x);

    cout << "Original List: ";
    display();

    int key = 1;
    int cnt = deleteAll(key);

    cout << "Count: " << cnt << "\n";
    cout << "Updated List: ";
    display();

    return 0;
}
